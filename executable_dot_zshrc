# vim: set ft=sh :
setopt INTERACTIVE_COMMENTS

source ~/.aliasesrc
source ~/.secrets

export EDITOR=nvim
export VISUAL=nvim
export PAGER=less

export PIP_DISABLE_PIP_VERSION_CHECK=1
export NODE_OPTIONS="--no-deprecation"

# Postgresql
export PGHOST=localhost
export PGPORT=5432
export PGUSER=postgres

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd
unsetopt beep
bindkey -v
export KEYTIMEOUT=1


# path
typeset -U PATH path
path=(
  "$HOME/.pyenv/shims"
  "$HOME/.pyenv/bin"
  "$HOME/flutter/bin"
  "$HOME/.local/bin" 
  "$HOME/bin" 
  "$path[@]"
)

export PATH

# PyENV
export PYENV_ROOT="$HOME/.pyenv"
export WORKON_HOME=$HOME/.venvs
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

os_has() {
  type "$1" > /dev/null 2>&1
}

# add keys for ssh
ssh_load() {
    eval "$(ssh-agent -s)";
    ssh-add ~/.ssh/id_rsa;
    ssh-add ~/.ssh/gitlab_personal;
}


_load_extensions(){
    if [ -f "$HOME/.extensions" ]; then
        for extension in $(ls -1 "$EXTENSIONS_DIR"/*.sh); do
            source "$extension"
        done;
    fi
}

_load_extensions

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# poetry
#
fpath+=~/.zfunc


export NVM_DIR="$HOME/.nvm"

if [ ! -s "$NVM_DIR/nvm.sh" ]; then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash    
fi

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    

## BITWARDEN
BW_SESSION_FILE="$HOME/.bw-session"

is_bw_locked() {
    # return true state if is unlocked
    bw_status=$(bw status 2>/dev/null | jq -r '.status' 2>/dev/null)

    if [ "$bw_status" = "locked" ]; then
        return 0  # is locked!
    else
        return 1
    fi
}

generate_session_file() {
    echo "Generate BW_SESSION"
    KEY="$(bw unlock --raw)"
    echo "$KEY" > "$BW_SESSION_FILE"
}

set_bitwarden() {
    # set a BW_SESSION if bitwarden is available
    if os_has "bw"; then 
        if [[ -f "$BW_SESSION_FILE" ]]; then
            # session exists as a file
            export BW_SESSION="$(cat $BW_SESSION_FILE)"
            if is_bw_locked; then
                # session file is outdated
                generate_session_file;
                export BW_SESSION="$(cat $BW_SESSION_FILE)"
            fi
        else
            generate_session_file;
            export BW_SESSION="$(cat $BW_SESSION_FILE)"
        fi
    fi
}

set_bitwarden

# Keep it last!
eval "$(starship init zsh)"

if os_has "neofetch"; then
    neofetch
fi
